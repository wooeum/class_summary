따로 정리한 03

동기, 비동기 프로그래밍이 무엇인가?
동기적 처리는 호출된 순서대로 종료됨을 말하는 것이다. 하나의 작업이 끝나야 다른 작업을 실행할 수 있다는 뜻이고, cpu작업과 io작업을 번갈아 가면서 할 경우 자원이 효율적으로 사용되지 않는다.

비동기적 처리란 호출된 순서대로 종료되지 않을 수 있다. 하나의 작업이 끝나지 않아도 다른 작업이 실행될 수 있고, 동시에 여러 작업을 실행할 수 있다.

코루틴(co-routine)을 이용해서 비동기 프로그래밍을 할 수 있다.
메인 루틴과 서브루틴 => 메인루틴이 실행되다가 서브루틴을 호출, 서브루틴이 끝난 후 메인루틴 다시 실행 => 동기적 실행  

코루틴: 메인 루틴에서 호출되는 또 다른 형태의 서브루틴 => 메인루틴과 코루틴은 대등하게 데이터를 주고받는다
python에서는 generator 기반의 구현과 async/await를 이용한 구현방식을 제공한다.

네이티브 코루틴 정의
def 앞에 async 예약어를 붙이면 코루틴을 정의하는 것이 된다.
await 코루틴을 이용해 코루틴 호출
여러개의 코루틴을 비동기적으로 실행해야 하는 경우 await asyncio.gather(코루틴,코루틴,...) 으로 묶어서 호출한다
메인루틴에서 코루틴을 호출 할 경우 asyncio.run(코루틴)을 이용해 실행한다
코루틴이 아닌 함수에서 코루틴을 호출할 때에는 asyncio.run()을 사용

